{"ast":null,"code":"var _jsxFileName = \"/Users/diogosilva/Desktop/the-burguer-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport axios from '../../../axios-orders';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 8\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deleveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              display: 'Fastest'\n            }, {\n              value: 'cheapest',\n              display: 'Cheapest'\n            }]\n          },\n          valid: true,\n          value: 'fastest'\n        }\n      },\n      formIsValid: false,\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.totalPrice,\n        orderData: formData\n      };\n      axios.post('/orders.json', order).then(response => {\n        console.log(response);\n        this.props.history.push('/');\n      }).catch(e => {\n        console.log(e);\n      }).finally(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangeHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedFormElement.valid = this.checkValidation(updatedFormElement.value, updatedFormElement.validation);\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      updatedFormElement.touched = true;\n      let formIsValid = true;\n\n      for (let inpuIdentifiers in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inpuIdentifiers].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n\n    this.checkValidation = (value, rules) => {\n      let isValid = true;\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      return isValid;\n    };\n  }\n\n  render() {\n    const formElements = [];\n\n    for (let key in this.state.orderForm) {\n      formElements.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, formElements.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      changed: event => this.inputChangeHandler(event, formElement.id),\n      touched: formElement.config.touched,\n      shouldValidate: formElement.config.validation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })), React.createElement(Button, {\n      disabled: !this.state.formIsValid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Order\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Enter Your Contact Data\"), form);\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {};\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.ingredients,\n    totalPrice: state.totalPrice\n  };\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/Users/diogosilva/Desktop/the-burguer-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","axios","Button","classes","Spinner","Input","connect","withErrorHandler","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deleveryMethod","options","display","formIsValid","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","totalPrice","orderData","post","then","response","console","log","history","push","catch","e","finally","inputChangeHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","checkValidation","inpuIdentifiers","rules","isValid","trim","length","render","formElements","key","id","config","form","map","formElement","mapDispatchToProps","dispatch","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from '../../../axios-orders';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 8\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            deleveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {\n                            value: 'fastest',\n                            display: 'Fastest'\n                        },\n                        {\n                            value: 'cheapest',\n                            display: 'Cheapest'\n                        }\n                    ]\n                },\n                valid: true,\n                value: 'fastest',\n            },\n        },\n        formIsValid: false,\n        loading: false\n    };\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        this.setState({loading: true});\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.totalPrice,\n            orderData: formData\n        };\n        axios.post('/orders.json', order)\n            .then(response => {\n                console.log(response);\n                this.props.history.push('/');\n            }).catch(e => {\n                console.log(e);\n            }).finally(() => {\n                this.setState({loading: false});\n            });\n    };\n\n    inputChangeHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidation(updatedFormElement.value, updatedFormElement.validation)\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        updatedFormElement.touched = true;\n\n        let formIsValid = true;\n        for (let inpuIdentifiers in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inpuIdentifiers].valid && formIsValid;\n        }\n\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    };\n\n    checkValidation = (value, rules) => {\n        let isValid = true;\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid;\n        }\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid;\n        }\n\n        return isValid;\n    };\n\n    render() {\n\n        const formElements = [];\n\n        for (let key in this.state.orderForm) {\n            formElements.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElements.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        changed={(event) => this.inputChangeHandler(event, formElement.id)}\n                        touched={formElement.config.touched}\n                        shouldValidate={formElement.config.validation} />\n                ))}\n                <Button disabled={!this.state.formIsValid}>Order</Button>\n            </form>\n        );\n\n        if (this.state.loading) {\n            form = <Spinner />\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {}\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.ingredients,\n        totalPrice: state.totalPrice\n    }\n};\n\nexport default connect(mapStateToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}