{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport { logoutSucceded, logout, authStart, authSuccess, authFailed, checkAuthTimeOut } from '../actions/index';\nimport axios from 'axios';\nexport function* logoutSaga(action) {\n  yield localStorage.removeItem('token');\n  yield localStorage.removeItem('expirationDate');\n  yield localStorage.removeItem('userID');\n  yield put(logoutSucceded());\n}\nexport function* checkAuthTimeOutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(logout());\n}\nexport function* addUserSaga(action) {\n  yield put(authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n    returnSecureToken: true\n  };\n  let url = action.isSignup ? 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' : 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n  const response = yield axios.post(url, authData);\n  const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n  localStorage.setItem('token', response.data.idToken);\n  localStorage.setItem('expirationDate', expirationDate);\n  localStorage.setItem('userID', response.data.localId);\n  yield put(authSuccess(response.data.idToken, response.data.localId));\n  yield put(authTimeOut(response.data.expiresIn));\n  yield put(authFailed(e.response.data.error));\n}","map":{"version":3,"sources":["/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/store/sagas/auth.js"],"names":["put","delay","logoutSucceded","logout","authStart","authSuccess","authFailed","checkAuthTimeOut","axios","logoutSaga","action","localStorage","removeItem","checkAuthTimeOutSaga","expirationTime","addUserSaga","authData","email","password","returnSecureToken","url","isSignup","response","post","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","authTimeOut","e","error"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,QAA2B,oBAA3B;AACA,SAASC,cAAT,EAAyBC,MAAzB,EAAiCC,SAAjC,EAA4CC,WAA5C,EAAyDC,UAAzD,EAAqEC,gBAArE,QAA6F,kBAA7F;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAChC,QAAMC,YAAY,CAACC,UAAb,CAAwB,OAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,gBAAxB,CAAN;AACA,QAAMD,YAAY,CAACC,UAAb,CAAwB,QAAxB,CAAN;AACA,QAAMZ,GAAG,CAACE,cAAc,EAAf,CAAT;AACH;AAED,OAAO,UAAUW,oBAAV,CAA+BH,MAA/B,EAAuC;AAC1C,QAAMT,KAAK,CAACS,MAAM,CAACI,cAAP,GAAwB,IAAzB,CAAX;AACA,QAAMd,GAAG,CAACG,MAAM,EAAP,CAAT;AACH;AAED,OAAO,UAAUY,WAAV,CAAsBL,MAAtB,EAA8B;AACjC,QAAMV,GAAG,CAACI,SAAS,EAAV,CAAT;AACA,QAAMY,QAAQ,GAAG;AACbC,IAAAA,KAAK,EAAEP,MAAM,CAACO,KADD;AAEbC,IAAAA,QAAQ,EAAER,MAAM,CAACQ,QAFJ;AAGbC,IAAAA,iBAAiB,EAAE;AAHN,GAAjB;AAMA,MAAIC,GAAG,GAAGV,MAAM,CAACW,QAAP,GACN,mHADM,GAEN,uGAFJ;AAIA,QAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAWH,GAAX,EAAgBJ,QAAhB,CAAvB;AAEA,QAAMQ,cAAc,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBJ,QAAQ,CAACK,IAAT,CAAcC,SAAd,GAA0B,IAA1D,CAAvB;AACAjB,EAAAA,YAAY,CAACkB,OAAb,CAAqB,OAArB,EAA8BP,QAAQ,CAACK,IAAT,CAAcG,OAA5C;AACAnB,EAAAA,YAAY,CAACkB,OAAb,CAAqB,gBAArB,EAAuCL,cAAvC;AACAb,EAAAA,YAAY,CAACkB,OAAb,CAAqB,QAArB,EAA+BP,QAAQ,CAACK,IAAT,CAAcI,OAA7C;AAEA,QAAM/B,GAAG,CAACK,WAAW,CAACiB,QAAQ,CAACK,IAAT,CAAcG,OAAf,EAAwBR,QAAQ,CAACK,IAAT,CAAcI,OAAtC,CAAZ,CAAT;AACA,QAAM/B,GAAG,CAACgC,WAAW,CAACV,QAAQ,CAACK,IAAT,CAAcC,SAAf,CAAZ,CAAT;AAEA,QAAM5B,GAAG,CAACM,UAAU,CAAC2B,CAAC,CAACX,QAAF,CAAWK,IAAX,CAAgBO,KAAjB,CAAX,CAAT;AACH","sourcesContent":["import { put, delay } from 'redux-saga/effects';\nimport { logoutSucceded, logout, authStart, authSuccess, authFailed, checkAuthTimeOut } from '../actions/index';\nimport axios from 'axios';\n\nexport function* logoutSaga(action) {\n    yield localStorage.removeItem('token');\n    yield localStorage.removeItem('expirationDate');\n    yield localStorage.removeItem('userID');\n    yield put(logoutSucceded());\n}\n\nexport function* checkAuthTimeOutSaga(action) {\n    yield delay(action.expirationTime * 1000);\n    yield put(logout());\n}\n\nexport function* addUserSaga(action) {\n    yield put(authStart());\n    const authData = {\n        email: action.email,\n        password: action.password,\n        returnSecureToken: true\n    };\n\n    let url = action.isSignup ?\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' :\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n\n    const response = yield axios.post(url, authData);\n    \n    const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    localStorage.setItem('token', response.data.idToken);\n    localStorage.setItem('expirationDate', expirationDate);\n    localStorage.setItem('userID', response.data.localId);\n\n    yield put(authSuccess(response.data.idToken, response.data.localId));\n    yield put(authTimeOut(response.data.expiresIn));\n\n    yield put(authFailed(e.response.data.error));\n}"]},"metadata":{},"sourceType":"module"}