{"ast":null,"code":"import axios from'axios';import{AUTH_START,AUTH_FAILED,AUTH_SUCCESS,AUTH_LOGOUT,SET_AUTH_REDIRECT}from'./actionTypes';export var authStart=function authStart(){return{type:AUTH_START};};export var authSuccess=function authSuccess(token,userId){return{type:AUTH_SUCCESS,token:token,userId:userId};};export var authFailed=function authFailed(error){return{type:AUTH_FAILED,error:error};};export var logout=function logout(){localStorage.removeItem('token');localStorage.removeItem('expirationDate');localStorage.removeItem('userID');return{type:AUTH_LOGOUT};};export var checkAuthTimeOut=function checkAuthTimeOut(expirationTime){return function(dispatch){setTimeout(function(){dispatch(logout());},expirationTime*1000);};};export var auth=function auth(email,password){var isSignup=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;return function(dispatch){dispatch(authStart());var authData={email:email,password:password,returnSecureToken:true};var url=isSignup?'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8':'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';axios.post(url,authData).then(function(resp){var expirationDate=new Date(new Date().getTime()+resp.data.expiresIn*1000);localStorage.setItem('token',resp.data.idToken);localStorage.setItem('expirationDate',expirationDate);localStorage.setItem('userID',resp.data.localId);dispatch(authSuccess(resp.data.idToken,resp.data.localId));dispatch(checkAuthTimeOut(resp.data.expiresIn));}).catch(function(e){dispatch(authFailed(e.response.data.error));});};};export var setRedirectPath=function setRedirectPath(path){return{type:SET_AUTH_REDIRECT,path:path};};export var authCheckState=function authCheckState(){return function(dispatch){var token=localStorage.getItem('token');if(!token){dispatch(logout());}else{var expirationTime=new Date(localStorage.getItem('expirationDate'));if(expirationTime>new Date()){var userId=localStorage.getItem('userID');dispatch(authSuccess(token,userId));dispatch(checkAuthTimeOut((expirationTime.getTime()-new Date().getTime())/1000));}else{dispatch(logout());}}};};","map":{"version":3,"sources":["/Users/diogosilva/Desktop/the-burguer-builder/src/store/actions/auth.js"],"names":["axios","AUTH_START","AUTH_FAILED","AUTH_SUCCESS","AUTH_LOGOUT","SET_AUTH_REDIRECT","authStart","type","authSuccess","token","userId","authFailed","error","logout","localStorage","removeItem","checkAuthTimeOut","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","resp","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","catch","e","response","setRedirectPath","path","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { AUTH_START, AUTH_FAILED, AUTH_SUCCESS, AUTH_LOGOUT, SET_AUTH_REDIRECT } from './actionTypes';\n\nexport const authStart = () => {\n    return {\n        type: AUTH_START\n    }\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: AUTH_SUCCESS,\n        token: token,\n        userId: userId\n    }\n};\n\nexport const authFailed = (error) => {\n    return {\n        type: AUTH_FAILED,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('userID');\n    return {\n        type: AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeOut = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n};\n\nexport const auth = (email, password, isSignup = false) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        };\n\n        let url = isSignup ?\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' :\n            'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n\n        axios.post(url, authData)\n            .then(resp => {\n                const expirationDate = new Date(new Date().getTime() + resp.data.expiresIn * 1000);\n                localStorage.setItem('token', resp.data.idToken);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('userID', resp.data.localId)\n                dispatch(authSuccess(resp.data.idToken, resp.data.localId));\n                dispatch(checkAuthTimeOut(resp.data.expiresIn));\n            })\n            .catch(e => {\n                dispatch(authFailed(e.response.data.error));\n            });\n    };\n};\n\nexport const setRedirectPath = (path) => {\n    return {\n        type: SET_AUTH_REDIRECT,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationTime = new Date(localStorage.getItem('expirationDate'));\n\n            if (expirationTime > new Date()) {\n                const userId =  localStorage.getItem('userID');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeOut((expirationTime.getTime() - new Date().getTime()) / 1000));\n            } else {\n                dispatch(logout());\n            }\n            \n        }\n\n    };\n};"]},"metadata":{},"sourceType":"module"}