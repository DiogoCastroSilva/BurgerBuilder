{"ast":null,"code":"var _jsxFileName = \"/Users/diogosilva/Desktop/the-burguer-builder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport classes from './Auth.module.css';\nimport { updateObject, checkValidation } from '../../shared/utility';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components//UI/Input/Input';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { auth } from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { setRedirectPath } from '../../store/actions/auth';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.inputChangeHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidation(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.building && this.props.redirectPath !== '/') {\n      this.props.onSetRedirectPath();\n    }\n  }\n\n  render() {\n    const formElements = [];\n\n    for (let key in this.state.controls) {\n      formElements.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = this.props.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }) : formElements.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      changed: event => this.inputChangeHandler(event, formElement.id),\n      touched: formElement.config.touched,\n      shouldValidate: formElement.config.validation,\n      autocomplete: \"on\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n    const errorMessage = this.props.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, this.props.error.message) : null;\n    const authRedirect = this.props.isAuth ? React.createElement(Redirect, {\n      to: this.props.redirectPath,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }) : null;\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, authRedirect, errorMessage, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"SUBMIT\")), React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      type: \"Danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGN UP' : 'SIGN IN'));\n  }\n\n}\n\nconst matStateToProps = state => {\n  return {\n    loading: state.auth.isLoading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    redirectPath: state.auth.redirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(auth(email, password, isSignup)),\n    onSetRedirectPath: () => dispatch(setRedirectPath('/'))\n  };\n};\n\nexport default connect(matStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/diogosilva/Desktop/the-burguer-builder/src/containers/Auth/Auth.js"],"names":["React","Component","classes","updateObject","checkValidation","Button","Input","Spinner","auth","connect","Redirect","setRedirectPath","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangeHandler","event","controlName","updatedControls","target","setState","submitHandler","e","preventDefault","props","onAuth","switchAuthModeHandler","prevState","componentDidMount","building","redirectPath","onSetRedirectPath","render","formElements","key","push","id","config","form","loading","map","formElement","errorMessage","error","message","authRedirect","isAuth","matStateToProps","isLoading","token","burgerBuilder","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './Auth.module.css';\n\nimport { updateObject, checkValidation } from '../../shared/utility';\n\nimport Button  from '../../components/UI/Button/Button';\nimport Input from '../../components//UI/Input/Input';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nimport { auth } from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { setRedirectPath } from '../../store/actions/auth';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    };\n\n    componentDidMount() {\n        if (!this.props.building && this.props.redirectPath !== '/') {\n            this.props.onSetRedirectPath();\n        }\n    }\n\n    inputChangeHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName]: updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidation(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        });\n\n        this.setState({ controls: updatedControls });\n    };\n\n    submitHandler = (e) => {\n        e.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup }\n        });\n    };\n\n    render() {\n        const formElements = [];\n        for (let key in this.state.controls) {\n            formElements.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        const form = this.props.loading ? <Spinner /> : formElements.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                changed={(event) => this.inputChangeHandler(event, formElement.id)}\n                touched={formElement.config.touched}\n                shouldValidate={formElement.config.validation}\n                autocomplete='on' />\n        ));\n\n        const errorMessage = this.props.error ? <p>{this.props.error.message}</p>: null;\n\n        const authRedirect = this.props.isAuth ? <Redirect to={this.props.redirectPath} /> : null;\n\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button>SUBMIT</Button>\n                </form>\n                <Button\n                    clicked={this.switchAuthModeHandler}\n                    type='Danger'>SWITCH TO {this.state.isSignup ? 'SIGN UP' : 'SIGN IN'}</Button>\n            </div>\n        )\n    }\n}\n\nconst matStateToProps = state => {\n    return {\n        loading: state.auth.isLoading,\n        error: state.auth.error,\n        isAuth: state.auth.token !== null,\n        building: state.burgerBuilder.building,\n        redirectPath: state.auth.redirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(auth(email, password, isSignup)),\n        onSetRedirectPath: () => dispatch(setRedirectPath('/'))\n    };\n};\n\nexport default connect(matStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}