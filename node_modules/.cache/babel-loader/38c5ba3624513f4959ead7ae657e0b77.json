{"ast":null,"code":"var _jsxFileName = \"/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/containers/Auth/Auth.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport classes from './Auth.module.css';\nimport { updateObject, checkValidation } from '../../shared/utility';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components//UI/Input/Input';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { auth } from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { setRedirectPath } from '../../store/actions/auth';\n\nconst Auth = ({\n  building,\n  loading,\n  error,\n  redirectPath,\n  onSetRedirectPath,\n  onAuth\n}) => {\n  const [controls, setControls] = useState({\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Mail Address'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const [isSignup, setSignup] = useState(true);\n  useEffect(() => {\n    if (!building && redirectPath !== '/') {\n      onSetRedirectPath();\n    }\n  }, [building, redirectPath, onSetRedirectPath]);\n\n  const inputChangeHandler = (event, controlName) => {\n    const updatedControls = updateObject(controls, {\n      [controlName]: updateObject(controls[controlName], {\n        value: event.target.value,\n        valid: checkValidation(event.target.value, controls[controlName].validation),\n        touched: true\n      })\n    });\n    setControls(updatedControls);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n    onAuth(controls.email.value, controls.password.value, isSignup);\n  };\n\n  const switchAuthModeHandler = () => {\n    setSignup(!isSignup);\n  };\n\n  const formElements = [];\n\n  for (let key in controls) {\n    formElements.push({\n      id: key,\n      config: controls[key]\n    });\n  }\n\n  const form = loading ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }) : formElements.map(formElement => React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    changed: event => inputChangeHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    shouldValidate: formElement.config.validation,\n    autocomplete: \"on\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }));\n  const errorMessage = error ? React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, error.message) : null;\n  const authRedirect = isAuth ? React.createElement(Redirect, {\n    to: redirectPath,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }) : null;\n  return React.createElement(\"div\", {\n    className: classes.Auth,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, authRedirect, errorMessage, React.createElement(\"form\", {\n    onSubmit: submitHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, form, React.createElement(Button, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"SUBMIT\")), React.createElement(Button, {\n    clicked: switchAuthModeHandler,\n    type: \"Danger\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"SWITCH TO \", isSignup ? 'SIGN UP' : 'SIGN IN'));\n};\n\nconst matStateToProps = state => {\n  return {\n    loading: state.auth.isLoading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null,\n    building: state.burgerBuilder.building,\n    redirectPath: state.auth.redirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(auth(email, password, isSignup)),\n    onSetRedirectPath: () => dispatch(setRedirectPath('/'))\n  };\n};\n\nexport default connect(matStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/containers/Auth/Auth.js"],"names":["React","Component","useState","useEffect","classes","updateObject","checkValidation","Button","Input","Spinner","auth","connect","Redirect","setRedirectPath","Auth","building","loading","error","redirectPath","onSetRedirectPath","onAuth","controls","setControls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","setSignup","inputChangeHandler","event","controlName","updatedControls","target","submitHandler","e","preventDefault","switchAuthModeHandler","formElements","key","push","id","config","form","map","formElement","errorMessage","message","authRedirect","isAuth","matStateToProps","state","isLoading","token","burgerBuilder","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport classes from './Auth.module.css';\n\nimport { updateObject, checkValidation } from '../../shared/utility';\n\nimport Button  from '../../components/UI/Button/Button';\nimport Input from '../../components//UI/Input/Input';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nimport { auth } from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { setRedirectPath } from '../../store/actions/auth';\n\nconst Auth = ({\n    building,\n    loading,\n    error,\n    redirectPath,\n    onSetRedirectPath,\n    onAuth\n}) => {\n    const [controls, setControls] = useState({\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'email',\n                placeholder: 'Mail Address'\n            },\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        password: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'password',\n                placeholder: 'Password'\n            },\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    });\n\n    const [isSignup, setSignup] = useState(true);\n\n    useEffect(() => {\n        if (!building && redirectPath !== '/') {\n            onSetRedirectPath();\n        }\n    }, [building, redirectPath, onSetRedirectPath]);\n\n\n    const inputChangeHandler = (event, controlName) => {\n        const updatedControls = updateObject(controls, {\n            [controlName]: updateObject(controls[controlName], {\n                value: event.target.value,\n                valid: checkValidation(event.target.value, controls[controlName].validation),\n                touched: true\n            })\n        });\n\n        setControls(updatedControls);\n    };\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        onAuth(controls.email.value, controls.password.value, isSignup);\n    };\n\n    const switchAuthModeHandler = () => {\n        setSignup(!isSignup);\n    };\n\n    const formElements = [];\n    for (let key in controls) {\n        formElements.push({\n            id: key,\n            config: controls[key]\n        });\n    }\n\n    const form = loading ? <Spinner /> : formElements.map(formElement => (\n        <Input \n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            changed={(event) => inputChangeHandler(event, formElement.id)}\n            touched={formElement.config.touched}\n            shouldValidate={formElement.config.validation}\n            autocomplete='on' />\n    ));\n\n    const errorMessage = error ? <p>{error.message}</p>: null;\n\n    const authRedirect = isAuth ? <Redirect to={redirectPath} /> : null;\n\n    return(\n        <div className={classes.Auth}>\n            {authRedirect}\n            {errorMessage}\n            <form onSubmit={submitHandler}>\n                {form}\n                <Button>SUBMIT</Button>\n            </form>\n            <Button\n                clicked={switchAuthModeHandler}\n                type='Danger'>SWITCH TO {isSignup ? 'SIGN UP' : 'SIGN IN'}</Button>\n        </div>\n    );\n}\n\nconst matStateToProps = state => {\n    return {\n        loading: state.auth.isLoading,\n        error: state.auth.error,\n        isAuth: state.auth.token !== null,\n        building: state.burgerBuilder.building,\n        redirectPath: state.auth.redirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(auth(email, password, isSignup)),\n        onSetRedirectPath: () => dispatch(setRedirectPath('/'))\n    };\n};\n\nexport default connect(matStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}