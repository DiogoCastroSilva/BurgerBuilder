{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_START, AUTH_FAILED, AUTH_SUCCESS, SET_AUTH_REDIRECT, AUTH_INITIATE_LOGOUT } from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport const authFailed = error => {\n  return {\n    type: AUTH_FAILED,\n    error: error\n  };\n};\nexport const logoutInit = () => {\n  return {};\n};\nexport const logout = () => {\n  // localStorage.removeItem('token');\n  // localStorage.removeItem('expirationDate');\n  // localStorage.removeItem('userID');\n  return {\n    type: AUTH_INITIATE_LOGOUT\n  };\n};\nexport const checkAuthTimeOut = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignup = false) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = isSignup ? 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' : 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n    axios.post(url, authData).then(resp => {\n      const expirationDate = new Date(new Date().getTime() + resp.data.expiresIn * 1000);\n      localStorage.setItem('token', resp.data.idToken);\n      localStorage.setItem('expirationDate', expirationDate);\n      localStorage.setItem('userID', resp.data.localId);\n      dispatch(authSuccess(resp.data.idToken, resp.data.localId));\n      dispatch(checkAuthTimeOut(resp.data.expiresIn));\n    }).catch(e => {\n      dispatch(authFailed(e.response.data.error));\n    });\n  };\n};\nexport const setRedirectPath = path => {\n  return {\n    type: SET_AUTH_REDIRECT,\n    path: path\n  };\n};\nexport const authCheckState = () => {\n  return dispatch => {\n    const token = localStorage.getItem('token');\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      const expirationTime = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationTime > new Date()) {\n        const userId = localStorage.getItem('userID');\n        dispatch(authSuccess(token, userId));\n        dispatch(checkAuthTimeOut((expirationTime.getTime() - new Date().getTime()) / 1000));\n      } else {\n        dispatch(logout());\n      }\n    }\n  };\n};","map":{"version":3,"sources":["/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/store/actions/auth.js"],"names":["axios","AUTH_START","AUTH_FAILED","AUTH_SUCCESS","SET_AUTH_REDIRECT","AUTH_INITIATE_LOGOUT","authStart","type","authSuccess","token","userId","authFailed","error","logoutInit","logout","checkAuthTimeOut","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","resp","expirationDate","Date","getTime","data","expiresIn","localStorage","setItem","idToken","localId","catch","e","response","setRedirectPath","path","authCheckState","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { AUTH_START, AUTH_FAILED, AUTH_SUCCESS, SET_AUTH_REDIRECT, AUTH_INITIATE_LOGOUT } from './actionTypes';\n\nexport const authStart = () => {\n    return {\n        type: AUTH_START\n    }\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: AUTH_SUCCESS,\n        token: token,\n        userId: userId\n    }\n};\n\nexport const authFailed = (error) => {\n    return {\n        type: AUTH_FAILED,\n        error: error\n    };\n};\n\nexport const logoutInit = () => {\n    return {\n        \n    };\n};\n\nexport const logout = () => {\n    // localStorage.removeItem('token');\n    // localStorage.removeItem('expirationDate');\n    // localStorage.removeItem('userID');\n    return {\n        type: AUTH_INITIATE_LOGOUT\n    };\n};\n\nexport const checkAuthTimeOut = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n};\n\nexport const auth = (email, password, isSignup = false) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        };\n\n        let url = isSignup ?\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' :\n            'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n\n        axios.post(url, authData)\n            .then(resp => {\n                const expirationDate = new Date(new Date().getTime() + resp.data.expiresIn * 1000);\n                localStorage.setItem('token', resp.data.idToken);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('userID', resp.data.localId)\n                dispatch(authSuccess(resp.data.idToken, resp.data.localId));\n                dispatch(checkAuthTimeOut(resp.data.expiresIn));\n            })\n            .catch(e => {\n                dispatch(authFailed(e.response.data.error));\n            });\n    };\n};\n\nexport const setRedirectPath = (path) => {\n    return {\n        type: SET_AUTH_REDIRECT,\n        path: path\n    };\n};\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(logout());\n        } else {\n            const expirationTime = new Date(localStorage.getItem('expirationDate'));\n\n            if (expirationTime > new Date()) {\n                const userId =  localStorage.getItem('userID');\n                dispatch(authSuccess(token, userId));\n                dispatch(checkAuthTimeOut((expirationTime.getTime() - new Date().getTime()) / 1000));\n            } else {\n                dispatch(logout());\n            }\n            \n        }\n\n    };\n};"]},"metadata":{},"sourceType":"module"}