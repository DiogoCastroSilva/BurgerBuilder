{"ast":null,"code":"var _jsxFileName = \"/Users/diogosilva/Desktop/the-burguer-builder/src/containers/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport classes from './Auth.module.css';\nimport Button from '../../components/UI/Button/Button';\nimport Input from '../../components//UI/Input/Input';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport { auth } from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Mail Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'password',\n            placeholder: 'Password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignup: true\n    };\n\n    this.checkValidation = (value, rules) => {\n      let isValid = true;\n\n      if (!rules) {\n        return true;\n      }\n\n      if (rules.required) {\n        isValid = value.trim() !== '' && isValid;\n      }\n\n      if (rules.minLength) {\n        isValid = value.length >= rules.minLength && isValid;\n      }\n\n      if (rules.maxLength) {\n        isValid = value.length <= rules.maxLength && isValid;\n      }\n\n      if (rules.isEmail) {\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      if (rules.isNumeric) {\n        const pattern = /^\\d+$/;\n        isValid = pattern.test(value) && isValid;\n      }\n\n      return isValid;\n    };\n\n    this.inputChangeHandler = (event, controlName) => {\n      const updatedControls = { ...this.state.controls,\n        [controlName]: { ...this.state.controls[controlName],\n          value: event.target.value,\n          valid: this.checkValidation(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        }\n      };\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = e => {\n      e.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignup: !prevState.isSignup\n        };\n      });\n    };\n  }\n\n  render() {\n    const formElements = [];\n\n    for (let key in this.state.controls) {\n      formElements.push({\n        id: key,\n        config: this.state.controls[key]\n      });\n    }\n\n    const form = this.props.loading ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }) : formElements.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      changed: event => this.inputChangeHandler(event, formElement.id),\n      touched: formElement.config.touched,\n      shouldValidate: formElement.config.validation,\n      autocomplete: \"on\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }));\n    const errorMessage = this.props.error ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, this.props.error.message) : null;\n    if (this.props.isAuth) return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, errorMessage, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"SUBMIT\")), React.createElement(Button, {\n      clicked: this.switchAuthModeHandler,\n      type: \"Danger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"SWITCH TO \", this.state.isSignup ? 'SIGN UP' : 'SIGN IN'));\n  }\n\n}\n\nconst matStateToProps = state => {\n  return {\n    loading: state.auth.isLoading,\n    error: state.auth.error,\n    isAuth: state.auth.token !== null\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignup) => dispatch(auth(email, password, isSignup))\n  };\n};\n\nexport default connect(matStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/Users/diogosilva/Desktop/the-burguer-builder/src/containers/Auth/Auth.js"],"names":["React","Component","classes","Button","Input","Spinner","auth","connect","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","checkValidation","rules","isValid","trim","length","maxLength","pattern","test","isNumeric","inputChangeHandler","event","controlName","updatedControls","target","setState","submitHandler","e","preventDefault","props","onAuth","switchAuthModeHandler","prevState","render","formElements","key","push","id","config","form","loading","map","formElement","errorMessage","error","message","isAuth","matStateToProps","isLoading","token","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport classes from './Auth.module.css';\n\nimport Button  from '../../components/UI/Button/Button';\nimport Input from '../../components//UI/Input/Input';\nimport Spinner from '../../components/UI/Spinner/Spinner';\n\nimport { auth } from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 6\n                },\n                valid: false,\n                touched: false\n            }\n        },\n        isSignup: true\n    };\n\n    checkValidation = (value, rules) => {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    };\n\n    inputChangeHandler = (event, controlName) => {\n        const updatedControls = {\n            ...this.state.controls,\n            [controlName]: {\n                ...this.state.controls[controlName],\n                value: event.target.value,\n                valid: this.checkValidation(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            }\n        };\n\n        this.setState({ controls: updatedControls });\n    };\n\n    submitHandler = (e) => {\n        e.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    };\n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return { isSignup: !prevState.isSignup }\n        });\n    };\n\n    render() {\n        const formElements = [];\n        for (let key in this.state.controls) {\n            formElements.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        const form = this.props.loading ? <Spinner /> : formElements.map(formElement => (\n            <Input \n                key={formElement.id}\n                elementType={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value}\n                invalid={!formElement.config.valid}\n                changed={(event) => this.inputChangeHandler(event, formElement.id)}\n                touched={formElement.config.touched}\n                shouldValidate={formElement.config.validation}\n                autocomplete='on' />\n        ));\n\n        const errorMessage = this.props.error ? <p>{this.props.error.message}</p>: null;\n\n        if (this.props.isAuth) \n\n        return(\n            <div className={classes.Auth}>\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button>SUBMIT</Button>\n                </form>\n                <Button\n                    clicked={this.switchAuthModeHandler}\n                    type='Danger'>SWITCH TO {this.state.isSignup ? 'SIGN UP' : 'SIGN IN'}</Button>\n            </div>\n        )\n    }\n}\n\nconst matStateToProps = state => {\n    return {\n        loading: state.auth.isLoading,\n        error: state.auth.error,\n        isAuth: state.auth.token !== null\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(auth(email, password, isSignup))\n    };\n};\n\nexport default connect(matStateToProps, mapDispatchToProps)(Auth);"]},"metadata":{},"sourceType":"module"}