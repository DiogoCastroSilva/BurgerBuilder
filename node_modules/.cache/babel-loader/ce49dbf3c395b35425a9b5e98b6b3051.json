{"ast":null,"code":"import axios from 'axios';\nimport { AUTH_START, AUTH_FAILED, AUTH_SUCCESS, AUTH_LOGOUT, SET_AUTH_REDIRECT } from './actionTypes';\nexport const authStart = () => {\n  return {\n    type: AUTH_START\n  };\n};\nexport const authSuccess = (token, userId) => {\n  return {\n    type: AUTH_SUCCESS,\n    token: token,\n    userId: userId\n  };\n};\nexport const authFailed = error => {\n  return {\n    type: AUTH_FAILED,\n    error: error\n  };\n};\nexport const logout = () => {\n  return {\n    type: AUTH_LOGOUT\n  };\n};\nexport const checkAuthTimeOut = expirationTime => {\n  return dispatch => {\n    setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime * 1000);\n  };\n};\nexport const auth = (email, password, isSignup = false) => {\n  return dispatch => {\n    dispatch(authStart());\n    const authData = {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    };\n    let url = isSignup ? 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' : 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n    axios.post(url, authData).then(resp => {\n      localStorage.setItem('token', resp.data.idToken);\n      localStorage.setItem('expirationDate');\n      dispatch(authSuccess(resp.data.idToken, resp.data.localId));\n      dispatch(checkAuthTimeOut(resp.data.expiresIn));\n    }).catch(e => {\n      console.log(e);\n      dispatch(authFailed(e.response.data.error));\n    });\n  };\n};\nexport const setRedirectPath = path => {\n  return {\n    type: SET_AUTH_REDIRECT,\n    path: path\n  };\n};","map":{"version":3,"sources":["/Users/diogosilva/Desktop/the-burguer-builder/src/store/actions/auth.js"],"names":["axios","AUTH_START","AUTH_FAILED","AUTH_SUCCESS","AUTH_LOGOUT","SET_AUTH_REDIRECT","authStart","type","authSuccess","token","userId","authFailed","error","logout","checkAuthTimeOut","expirationTime","dispatch","setTimeout","auth","email","password","isSignup","authData","returnSecureToken","url","post","then","resp","localStorage","setItem","data","idToken","localId","expiresIn","catch","e","console","log","response","setRedirectPath","path"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,YAAlC,EAAgDC,WAAhD,EAA6DC,iBAA7D,QAAsF,eAAtF;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEN;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMO,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1C,SAAO;AACHH,IAAAA,IAAI,EAAEJ,YADH;AAEHM,IAAAA,KAAK,EAAEA,KAFJ;AAGHC,IAAAA,MAAM,EAAEA;AAHL,GAAP;AAKH,CANM;AAQP,OAAO,MAAMC,UAAU,GAAIC,KAAD,IAAW;AACjC,SAAO;AACHL,IAAAA,IAAI,EAAEL,WADH;AAEHU,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,MAAM,GAAG,MAAM;AACxB,SAAO;AACHN,IAAAA,IAAI,EAAEH;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMU,gBAAgB,GAAIC,cAAD,IAAoB;AAChD,SAAOC,QAAQ,IAAI;AACfC,IAAAA,UAAU,CAAC,MAAM;AACbD,MAAAA,QAAQ,CAACH,MAAM,EAAP,CAAR;AACH,KAFS,EAEPE,cAAc,GAAG,IAFV,CAAV;AAGH,GAJD;AAKH,CANM;AAQP,OAAO,MAAMG,IAAI,GAAG,CAACC,KAAD,EAAQC,QAAR,EAAkBC,QAAQ,GAAG,KAA7B,KAAuC;AACvD,SAAOL,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACV,SAAS,EAAV,CAAR;AACA,UAAMgB,QAAQ,GAAG;AACbH,MAAAA,KAAK,EAAEA,KADM;AAEbC,MAAAA,QAAQ,EAAEA,QAFG;AAGbG,MAAAA,iBAAiB,EAAE;AAHN,KAAjB;AAMA,QAAIC,GAAG,GAAGH,QAAQ,GACd,mHADc,GAEd,uGAFJ;AAIArB,IAAAA,KAAK,CAACyB,IAAN,CAAWD,GAAX,EAAgBF,QAAhB,EACKI,IADL,CACUC,IAAI,IAAI;AACVC,MAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,IAAL,CAAUC,OAAxC;AACAH,MAAAA,YAAY,CAACC,OAAb,CAAqB,gBAArB;AACAb,MAAAA,QAAQ,CAACR,WAAW,CAACmB,IAAI,CAACG,IAAL,CAAUC,OAAX,EAAoBJ,IAAI,CAACG,IAAL,CAAUE,OAA9B,CAAZ,CAAR;AACAhB,MAAAA,QAAQ,CAACF,gBAAgB,CAACa,IAAI,CAACG,IAAL,CAAUG,SAAX,CAAjB,CAAR;AACH,KANL,EAOKC,KAPL,CAOWC,CAAC,IAAI;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAnB,MAAAA,QAAQ,CAACL,UAAU,CAACwB,CAAC,CAACG,QAAF,CAAWR,IAAX,CAAgBlB,KAAjB,CAAX,CAAR;AACH,KAVL;AAWH,GAvBD;AAwBH,CAzBM;AA2BP,OAAO,MAAM2B,eAAe,GAAIC,IAAD,IAAU;AACrC,SAAO;AACHjC,IAAAA,IAAI,EAAEF,iBADH;AAEHmC,IAAAA,IAAI,EAAEA;AAFH,GAAP;AAIH,CALM","sourcesContent":["import axios from 'axios';\nimport { AUTH_START, AUTH_FAILED, AUTH_SUCCESS, AUTH_LOGOUT, SET_AUTH_REDIRECT } from './actionTypes';\n\nexport const authStart = () => {\n    return {\n        type: AUTH_START\n    }\n};\n\nexport const authSuccess = (token, userId) => {\n    return {\n        type: AUTH_SUCCESS,\n        token: token,\n        userId: userId\n    }\n};\n\nexport const authFailed = (error) => {\n    return {\n        type: AUTH_FAILED,\n        error: error\n    };\n};\n\nexport const logout = () => {\n    return {\n        type: AUTH_LOGOUT\n    };\n};\n\nexport const checkAuthTimeOut = (expirationTime) => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(logout());\n        }, expirationTime * 1000);\n    };\n};\n\nexport const auth = (email, password, isSignup = false) => {\n    return dispatch => {\n        dispatch(authStart());\n        const authData = {\n            email: email,\n            password: password,\n            returnSecureToken: true\n        };\n\n        let url = isSignup ?\n            'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' :\n            'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n\n        axios.post(url, authData)\n            .then(resp => {\n                localStorage.setItem('token', resp.data.idToken);\n                localStorage.setItem('expirationDate');\n                dispatch(authSuccess(resp.data.idToken, resp.data.localId));\n                dispatch(checkAuthTimeOut(resp.data.expiresIn));\n            })\n            .catch(e => {\n                console.log(e);\n                dispatch(authFailed(e.response.data.error));\n            });\n    };\n};\n\nexport const setRedirectPath = (path) => {\n    return {\n        type: SET_AUTH_REDIRECT,\n        path: path\n    };\n};"]},"metadata":{},"sourceType":"module"}