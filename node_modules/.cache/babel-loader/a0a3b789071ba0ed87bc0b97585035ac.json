{"ast":null,"code":"var _jsxFileName = \"/Users/diogosilva/Desktop/the-burguer-builder/src/containers/BurguerBuilder/BurguerBuilder.js\";\nimport React, { Component, Fragment } from 'react';\nimport Burguer from '../../components/Burguer/Burguer';\nimport BuildControls from '../../components/Burguer/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burguer/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../hoc/withErrorHandler/withErrorHandler';\nimport { connect } from 'react-redux';\nimport { addIngredient, removeIngredient } from '../../store/actions/index';\n\nclass BurguerBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pusrchasing: false,\n      loading: false,\n      error: false\n    };\n\n    this.updatePurchaseState = ingredients => {\n      const sum = Object.keys(ingredients).map(key => ingredients[key]).reduce((sum, el) => {\n        return sum + el;\n      }, 0);\n      return sum > 0;\n    };\n\n    this.purchaseHandler = () => {\n      this.setState({\n        pusrchasing: true\n      });\n    };\n\n    this.purchaseCancelHandler = () => {\n      this.setState({\n        pusrchasing: false\n      });\n    };\n\n    this.purchaseContinueHandler = () => {\n      this.props.history.push('/checkout');\n    };\n  }\n\n  componentDidMount() {// this.setState({loading: true})\n  }\n\n  render() {\n    const disableInfo = { ...this.props.ingredients\n    };\n\n    for (let key in disableInfo) {\n      disableInfo[key] = disableInfo[key] <= 0;\n    }\n\n    let orderSummary = this.state.loading || this.props.ingredients == null ? React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }) : React.createElement(OrderSummary, {\n      ingredients: this.props.ingredients,\n      purchaseCancel: this.purchaseCancelHandler,\n      purchaseContinue: this.purchaseContinueHandler,\n      price: this.props.totalPrice,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n    let burguer = this.props.ingredients ? React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Burguer, {\n      ingredients: this.props.ingredients,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(BuildControls, {\n      ingredientAdded: this.props.onIngredientAdded,\n      ingredientRemoved: this.props.onIngredientRemoved,\n      disabled: disableInfo,\n      purchasable: this.updatePurchaseState(this.props.ingredients),\n      price: this.props.totalPrice,\n      ordered: this.purchaseHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })) : React.createElement(Spinner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    });\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Modal, {\n      show: this.state.pusrchasing,\n      modalClose: this.purchaseCancelHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, orderSummary), burguer);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.ingredients,\n    totalPrice: state.totalPrice\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onIngredientAdded: name => dispatch(addIngredient(name)),\n    onIngredientRemoved: name => dispatch(removeIngredient(name))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurguerBuilder, axios));","map":{"version":3,"sources":["/Users/diogosilva/Desktop/the-burguer-builder/src/containers/BurguerBuilder/BurguerBuilder.js"],"names":["React","Component","Fragment","Burguer","BuildControls","Modal","OrderSummary","Spinner","withErrorHandler","connect","addIngredient","removeIngredient","BurguerBuilder","state","pusrchasing","loading","error","updatePurchaseState","ingredients","sum","Object","keys","map","key","reduce","el","purchaseHandler","setState","purchaseCancelHandler","purchaseContinueHandler","props","history","push","componentDidMount","render","disableInfo","orderSummary","totalPrice","burguer","onIngredientAdded","onIngredientRemoved","mapStateToProps","mapDispatchToProps","dispatch","name","axios"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport Burguer from '../../components/Burguer/Burguer';\nimport BuildControls from '../../components/Burguer/BuildControls/BuildControls';\nimport Modal from '../../components/UI/Modal/Modal';\nimport OrderSummary from '../../components/Burguer/OrderSummary/OrderSummary';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport withErrorHandler from '../hoc/withErrorHandler/withErrorHandler';\nimport { connect } from 'react-redux';\nimport { addIngredient, removeIngredient } from '../../store/actions/index';\n\nclass BurguerBuilder extends Component {\n    state = {\n        pusrchasing: false,\n        loading: false,\n        error: false\n    };\n\n    componentDidMount() {\n        // this.setState({loading: true})\n        \n    }\n\n    updatePurchaseState = (ingredients) => {\n        const sum = Object.keys(ingredients)\n            .map(key => ingredients[key])\n            .reduce((sum, el) => {\n                return sum + el;\n            }, 0);\n        return sum > 0;\n    };\n\n    purchaseHandler = () => {\n        this.setState({pusrchasing: true});\n    };\n\n    purchaseCancelHandler = () => {\n        this.setState({pusrchasing: false});\n    };\n\n    purchaseContinueHandler = () => {\n        this.props.history.push('/checkout');\n    };\n\n    render() {\n        const disableInfo = {\n            ...this.props.ingredients\n        };\n\n        for (let key in disableInfo) {\n            disableInfo[key] = disableInfo[key] <= 0;\n        }\n\n        let orderSummary = this.state.loading || this.props.ingredients == null ?\n                <Spinner /> :\n                <OrderSummary\n                    ingredients={this.props.ingredients}\n                    purchaseCancel={this.purchaseCancelHandler}\n                    purchaseContinue={this.purchaseContinueHandler}\n                    price={this.props.totalPrice} />;\n\n        let burguer = this.props.ingredients ? (\n            <Fragment>\n                <Burguer ingredients={this.props.ingredients} />\n                <BuildControls\n                    ingredientAdded={this.props.onIngredientAdded}\n                    ingredientRemoved={this.props.onIngredientRemoved}\n                    disabled={disableInfo}\n                    purchasable={this.updatePurchaseState(this.props.ingredients)}\n                    price={this.props.totalPrice}\n                    ordered={this.purchaseHandler} />\n            </Fragment> \n        ) : <Spinner />;\n\n        return (\n            <Fragment>\n                <Modal show={this.state.pusrchasing} modalClose={this.purchaseCancelHandler}>\n                    {orderSummary}\n                </Modal>\n                {burguer}\n            </Fragment>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.ingredients,\n        totalPrice: state.totalPrice\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onIngredientAdded: (name) => dispatch(addIngredient(name)),\n        onIngredientRemoved: (name) => dispatch(removeIngredient(name))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(BurguerBuilder, axios));\n"]},"metadata":{},"sourceType":"module"}