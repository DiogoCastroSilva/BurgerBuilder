{"ast":null,"code":"var _jsxFileName = \"/Users/diogosilva/Desktop/the-burguer-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { Component } from 'react';\nimport axios from '../../../axios-orders';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Your name'\n          },\n          value: null\n        },\n        street: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: null\n        },\n        zipCode: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'ZIP Code'\n          },\n          value: null\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: null\n        },\n        email: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: null\n        },\n        deleveryMethod: {\n          elementType: 'select',\n          elementConfig: {\n            options: [{\n              value: 'fastest',\n              display: 'Fastest'\n            }, {\n              value: 'cheapest',\n              display: 'Cheapest'\n            }]\n          },\n          value: null\n        }\n      },\n      loading: false\n    };\n\n    this.orderHandler = event => {\n      event.preventDefault();\n      this.setState({\n        loading: true\n      });\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier];\n      }\n\n      const order = {\n        ingredients: this.props.ingredients,\n        price: this.props.price\n      };\n      axios.post('/orders.json', order).then(response => {\n        console.log(response);\n        this.props.history.push('/');\n      }).catch(e => {\n        console.log(e);\n      }).finally(() => {\n        this.setState({\n          loading: false\n        });\n      });\n    };\n\n    this.inputChangeHandler = (event, inputIdentifier) => {\n      const updatedOrderForm = { ...this.state.orderForm\n      };\n      const updatedFormElement = { ...updatedOrderForm[inputIdentifier]\n      };\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n      console.log(updatedOrderForm);\n      this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n  }\n\n  render() {\n    const formElements = [];\n\n    for (let key in this.state.orderForm) {\n      formElements.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, formElements.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig,\n      value: formElement.config.value,\n      changed: event => this.inputChangeHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    })), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Order\"));\n\n    if (this.state.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Enter Your Contact Data\"), form);\n  }\n\n}\n\nexport default ContactData;","map":{"version":3,"sources":["/Users/diogosilva/Desktop/the-burguer-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","axios","Button","classes","Spinner","Input","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","street","zipCode","country","email","deleveryMethod","options","display","loading","orderHandler","event","preventDefault","setState","formData","formElementIdentifier","order","ingredients","props","price","post","then","response","console","log","history","push","catch","e","finally","inputChangeHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","render","formElements","key","id","config","form","map","formElement"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from '../../../axios-orders';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your name'\n                },\n                value: null\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: null\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: null\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: null\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: null\n            },\n            deleveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {\n                            value: 'fastest',\n                            display: 'Fastest'\n                        },\n                        {\n                            value: 'cheapest',\n                            display: 'Cheapest'\n                        }\n                    ]\n                },\n                value: null\n            },\n        },\n        loading: false\n    };\n\n    orderHandler = (event) => {\n        event.preventDefault();\n\n        this.setState({loading: true});\n\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier]\n        }\n\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n        };\n        axios.post('/orders.json', order)\n            .then(response => {\n                console.log(response);\n                this.props.history.push('/');\n            }).catch(e => {\n                console.log(e);\n            }).finally(() => {\n                this.setState({loading: false});\n            });\n    };\n\n    inputChangeHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n\n        updatedFormElement.value = event.target.value;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n        console.log(updatedOrderForm);\n        this.setState({orderForm: updatedOrderForm});\n    };\n\n    render() {\n\n        const formElements = [];\n\n        for (let key in this.state.orderForm) {\n            formElements.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElements.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        changed={(event) => this.inputChangeHandler(event, formElement.id)} />\n                ))}\n                <Button>Order</Button>\n            </form>\n        );\n\n        if (this.state.loading) {\n            form = <Spinner />\n        }\n        return(\n            <div className={classes.ContactData}>\n                <h4>Enter Your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\n\nexport default ContactData;"]},"metadata":{},"sourceType":"module"}