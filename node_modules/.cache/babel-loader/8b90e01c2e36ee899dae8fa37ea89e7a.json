{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport { logoutSucceded, logout, authStart, authSuccess, authFailed, checkAuthTimeOut } from '../actions/index';\nimport axios from 'axios';\nexport function* logoutSaga(action) {\n  y;\n  yield localStorage.removeItem('token');\n  yield localStorage.removeItem('expirationDate');\n  yield localStorage.removeItem('userID');\n  yield put(logoutSucceded());\n}\nexport function* checkAuthTimeOutSaga(action) {\n  yield delay(action.expirationTime * 1000);\n  yield put(logout());\n}\nexport function* authUserSaga(action) {\n  yield put(authStart());\n  const authData = {\n    email: action.email,\n    password: action.password,\n    returnSecureToken: true\n  };\n  let url = action.isSignup ? 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' : 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n\n  try {\n    const response = yield axios.post(url, authData);\n    const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n    localStorage.setItem('token', response.data.idToken);\n    localStorage.setItem('expirationDate', expirationDate);\n    localStorage.setItem('userID', response.data.localId);\n    yield put(authSuccess(response.data.idToken, response.data.localId));\n    yield put(checkAuthTimeOut(response.data.expiresIn));\n  } catch (e) {\n    yield put(authFailed(e.response.data.error));\n  }\n}\nexport function* authCheckStateSaga(action) {\n  const token = yield localStorage.getItem('token');\n\n  if (!token) {\n    put(logout());\n  } else {\n    const expirationTime = yield new Date(localStorage.getItem('expirationDate'));\n\n    if (expirationTime > new Date()) {\n      const userId = yield localStorage.getItem('userID');\n      put(authSuccess(token, userId));\n      put(checkAuthTimeOut((expirationTime.getTime() - new Date().getTime()) / 1000));\n    } else {\n      put(logout());\n    }\n  }\n}","map":{"version":3,"sources":["/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/store/sagas/auth.js"],"names":["put","delay","logoutSucceded","logout","authStart","authSuccess","authFailed","checkAuthTimeOut","axios","logoutSaga","action","y","localStorage","removeItem","checkAuthTimeOutSaga","expirationTime","authUserSaga","authData","email","password","returnSecureToken","url","isSignup","response","post","expirationDate","Date","getTime","data","expiresIn","setItem","idToken","localId","e","error","authCheckStateSaga","token","getItem","userId"],"mappings":"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","sourcesContent":["import { put, delay } from 'redux-saga/effects';\nimport { logoutSucceded, logout, authStart, authSuccess, authFailed, checkAuthTimeOut } from '../actions/index';\nimport axios from 'axios';\n\nexport function* logoutSaga(action) {\n    y\n    yield localStorage.removeItem('token');\n    yield localStorage.removeItem('expirationDate');\n    yield localStorage.removeItem('userID');\n    yield put(logoutSucceded());\n}\n\nexport function* checkAuthTimeOutSaga(action) {\n    yield delay(action.expirationTime * 1000);\n    yield put(logout());\n}\n\nexport function* authUserSaga(action) {\n    yield put(authStart());\n    const authData = {\n        email: action.email,\n        password: action.password,\n        returnSecureToken: true\n    };\n\n    let url = action.isSignup ?\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8' :\n        'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCXyYykiJQjUafDFB18wiFqDXo21AdZ6L8';\n\n    try {\n        const response = yield axios.post(url, authData);\n\n        const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n        localStorage.setItem('token', response.data.idToken);\n        localStorage.setItem('expirationDate', expirationDate);\n        localStorage.setItem('userID', response.data.localId);\n\n        yield put(authSuccess(response.data.idToken, response.data.localId));\n        yield put(checkAuthTimeOut(response.data.expiresIn));\n    } catch(e) {\n        yield put(authFailed(e.response.data.error));\n    }\n}\n\nexport function* authCheckStateSaga(action) {\n    const token = yield localStorage.getItem('token');\n    if (!token) {\n        put(logout());\n    } else {\n        const expirationTime = yield new Date(localStorage.getItem('expirationDate'));\n\n        if (expirationTime > new Date()) {\n            const userId =  yield localStorage.getItem('userID');\n            put(authSuccess(token, userId));\n            put(checkAuthTimeOut((expirationTime.getTime() - new Date().getTime()) / 1000));\n        } else {\n            put(logout());\n        }\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}