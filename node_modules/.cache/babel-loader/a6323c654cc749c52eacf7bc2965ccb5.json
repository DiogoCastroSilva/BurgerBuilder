{"ast":null,"code":"var _jsxFileName = \"/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/containers/Checkout/ContactData/ContactData.js\";\nimport React, { useState } from 'react';\nimport axios from '../../../axios-orders';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport { purchaseBurger } from '../../../store/actions/index';\nimport { updateObject, checkValidation } from '../../../shared/utility';\n\nconst ContactData = ({\n  onOrderBurger,\n  loading,\n  ingredients,\n  totalPrice,\n  userId,\n  token\n}) => {\n  const [orderForm, setOrderForm] = useState({\n    name: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Your name'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    street: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Street'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    zipCode: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'ZIP Code'\n      },\n      value: '',\n      validation: {\n        required: true,\n        minLength: 5,\n        maxLength: 5,\n        isNumeric: true\n      },\n      valid: false,\n      touched: false\n    },\n    country: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Country'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: 'Your E-Mail'\n      },\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    deleveryMethod: {\n      elementType: 'select',\n      elementConfig: {\n        options: [{\n          value: 'fastest',\n          display: 'Fastest'\n        }, {\n          value: 'cheapest',\n          display: 'Cheapest'\n        }]\n      },\n      valid: true,\n      value: 'fastest'\n    }\n  });\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const orderHandler = event => {\n    event.preventDefault();\n    const formData = {};\n\n    for (let formElementIdentifier in orderForm) {\n      formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n    }\n\n    const order = {\n      ingredients: ingredients,\n      price: totalPrice,\n      orderData: formData,\n      userId: userId\n    };\n    onOrderBurger(order, token);\n  };\n\n  const inputChangeHandler = (event, inputIdentifier) => {\n    const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidation(event.target.value, orderForm[inputIdentifier].validation),\n      touched: true\n    });\n    const updatedOrderForm = updateObject(orderForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    let formIsValid = true;\n\n    for (let inpuIdentifiers in updatedOrderForm) {\n      formIsValid = updatedOrderForm[inpuIdentifiers].valid && formIsValid;\n    }\n\n    setFormIsValid(formIsValid);\n    setOrderForm(updatedOrderForm);\n  };\n\n  const formElements = [];\n\n  for (let key in orderForm) {\n    formElements.push({\n      id: key,\n      config: orderForm[key]\n    });\n  }\n\n  const form = loading ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }) : React.createElement(\"form\", {\n    onSubmit: orderHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, formElements.map(formElement => React.createElement(Input, {\n    key: formElement.id,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig,\n    value: formElement.config.value,\n    invalid: !formElement.config.valid,\n    changed: event => inputChangeHandler(event, formElement.id),\n    touched: formElement.config.touched,\n    shouldValidate: formElement.config.validation,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  })), React.createElement(Button, {\n    disabled: !formIsValid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Order\"));\n  return React.createElement(\"div\", {\n    className: classes.ContactData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, \"Enter Your Contact Data\"), form);\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(purchaseBurger(orderData, token))\n  };\n};\n\nconst mapStateToProps = state => {\n  return {\n    ingredients: state.burgerBuilder.ingredients,\n    totalPrice: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","useState","axios","Button","classes","Spinner","Input","connect","withErrorHandler","purchaseBurger","updateObject","checkValidation","ContactData","onOrderBurger","loading","ingredients","totalPrice","userId","token","orderForm","setOrderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deleveryMethod","options","display","formIsValid","setFormIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","price","orderData","inputChangeHandler","inputIdentifier","updatedFormElement","target","updatedOrderForm","inpuIdentifiers","formElements","key","push","id","config","form","map","formElement","mapDispatchToProps","dispatch","mapStateToProps","state","burgerBuilder","auth"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from '../../../axios-orders';\nimport Button from '../../../components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\nimport { purchaseBurger } from '../../../store/actions/index';\n\nimport { updateObject, checkValidation } from '../../../shared/utility';\n\nconst ContactData = ({\n    onOrderBurger,\n    loading,\n    ingredients,\n    totalPrice,\n    userId,\n    token\n}) => {\n    const [orderForm, setOrderForm] = useState({ name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Your name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'ZIP Code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deleveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {\n                            value: 'fastest',\n                            display: 'Fastest'\n                        },\n                        {\n                            value: 'cheapest',\n                            display: 'Cheapest'\n                        }\n                    ]\n                },\n                valid: true,\n                value: 'fastest',\n            },\n        });\n\n    const [formIsValid, setFormIsValid] = useState(false);\n\n    const orderHandler = (event) => {\n        event.preventDefault();\n\n        const formData = {};\n        for (let formElementIdentifier in orderForm) {\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\n        }\n\n        const order = {\n            ingredients: ingredients,\n            price: totalPrice,\n            orderData: formData,\n            userId: userId\n        };\n        \n        onOrderBurger(order, token);\n    };\n\n    const inputChangeHandler = (event, inputIdentifier) => {\n        const updatedFormElement = updateObject(orderForm[inputIdentifier], {\n            value: event.target.value,\n            valid: checkValidation(event.target.value,\n                orderForm[inputIdentifier].validation),\n            touched: true\n        });\n\n        const updatedOrderForm = updateObject(orderForm, {\n            [inputIdentifier]: updatedFormElement\n        });\n\n        let formIsValid = true;\n        for (let inpuIdentifiers in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inpuIdentifiers].valid && formIsValid;\n        }\n\n        setFormIsValid(formIsValid);\n        setOrderForm(updatedOrderForm);\n    };\n\n    const formElements = [];\n\n    for (let key in orderForm) {\n        formElements.push({\n            id: key,\n            config: orderForm[key]\n        });\n    }\n\n    const form = loading ? <Spinner /> : (\n        <form onSubmit={orderHandler}>\n            {formElements.map(formElement => (\n                <Input\n                    key={formElement.id}\n                    elementType={formElement.config.elementType}\n                    elementConfig={formElement.config.elementConfig}\n                    value={formElement.config.value}\n                    invalid={!formElement.config.valid}\n                    changed={(event) => inputChangeHandler(event, formElement.id)}\n                    touched={formElement.config.touched}\n                    shouldValidate={formElement.config.validation} />\n            ))}\n            <Button disabled={!formIsValid}>Order</Button>\n        </form>\n    );\n\n    return(\n        <div className={classes.ContactData}>\n            <h4>Enter Your Contact Data</h4>\n            {form}\n        </div>\n    );\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onOrderBurger: (orderData, token) => dispatch(purchaseBurger(orderData, token))\n    };\n};\n\nconst mapStateToProps = state => {\n    return {\n        ingredients: state.burgerBuilder.ingredients,\n        totalPrice: state.burgerBuilder.totalPrice,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));"]},"metadata":{},"sourceType":"module"}