{"ast":null,"code":"import { PURCHASE_BURGER_SUCCESS, PURCHASE_BURGER_FAILED, PURCHASE_BURGER_START, PURCHASE_INIT, FETCH_ORDERS_START, FETCH_ORDERS_SUCCESS, FETCH_ORDERS_FAILED } from '../actions/actionTypes';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: PURCHASE_BURGER_SUCCESS,\n    id: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFailed = error => {\n  return {\n    type: PURCHASE_BURGER_FAILED,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {};\n};\nexport const purchaseInit = () => {\n  return {\n    type: PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFailed = error => {\n  return {\n    type: FETCH_ORDERS_FAILED,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(fetchOrdersStart());\n    const queryParams = `auth=${token}&orderBy=\"userId\"&equalTo=\"${userId}\"`;\n    axios.get(`/orders.json?auth=${token}?${queryParams}`).then(response => {\n      const fetchOrders = [];\n\n      for (let key in response.data) {\n        fetchOrders.push({ ...response.data[key],\n          id: key\n        });\n      }\n\n      dispatch(fetchOrdersSuccess(fetchOrders));\n    }).catch(e => {\n      dispatch(fetchOrdersFailed(e));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/store/actions/order.js"],"names":["PURCHASE_BURGER_SUCCESS","PURCHASE_BURGER_FAILED","PURCHASE_BURGER_START","PURCHASE_INIT","FETCH_ORDERS_START","FETCH_ORDERS_SUCCESS","FETCH_ORDERS_FAILED","purchaseBurgerSuccess","id","orderData","type","purchaseBurgerFailed","error","purchaseBurgerStart","purchaseBurger","token","dispatch","purchaseInit","fetchOrdersSuccess","orders","fetchOrdersFailed","fetchOrdersStart","fetchOrders","userId","queryParams","axios","get","then","response","key","data","push","catch","e"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,sBAAlC,EACIC,qBADJ,EAC2BC,aAD3B,EAC0CC,kBAD1C,EAEIC,oBAFJ,EAE0BC,mBAF1B,QAEqD,wBAFrD;AAIA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACpD,SAAO;AACHC,IAAAA,IAAI,EAAEV,uBADH;AAEHQ,IAAAA,EAAE,EAAEA,EAFD;AAGHC,IAAAA,SAAS,EAAEA;AAHR,GAAP;AAKH,CANM;AAQP,OAAO,MAAME,oBAAoB,GAAIC,KAAD,IAAW;AAC3C,SAAO;AACHF,IAAAA,IAAI,EAAET,sBADH;AAEHW,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHH,IAAAA,IAAI,EAAER;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMY,cAAc,GAAG,CAACL,SAAD,EAAYM,KAAZ,KAAsB;AAChD,SAAOC,QAAQ,IAAI,CAElB,CAFD;AAGH,CAJM;AAMP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHP,IAAAA,IAAI,EAAEP;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMe,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAO;AACHT,IAAAA,IAAI,EAAEL,oBADH;AAEHc,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,iBAAiB,GAAIR,KAAD,IAAW;AACxC,SAAO;AACHF,IAAAA,IAAI,EAAEJ,mBADH;AAEHM,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMS,gBAAgB,GAAG,MAAM;AAClC,SAAO;AACHX,IAAAA,IAAI,EAAEN;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMkB,WAAW,GAAG,CAACP,KAAD,EAAQQ,MAAR,KAAmB;AAC1C,SAAOP,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACK,gBAAgB,EAAjB,CAAR;AACA,UAAMG,WAAW,GAAI,QAAOT,KAAM,8BAA6BQ,MAAO,GAAtE;AACAE,IAAAA,KAAK,CAACC,GAAN,CAAW,qBAAoBX,KAAM,IAAGS,WAAY,EAApD,EACKG,IADL,CACUC,QAAQ,IAAI;AACd,YAAMN,WAAW,GAAG,EAApB;;AACA,WAAK,IAAIO,GAAT,IAAgBD,QAAQ,CAACE,IAAzB,EAA+B;AAC3BR,QAAAA,WAAW,CAACS,IAAZ,CAAiB,EACb,GAAGH,QAAQ,CAACE,IAAT,CAAcD,GAAd,CADU;AAEbrB,UAAAA,EAAE,EAAEqB;AAFS,SAAjB;AAIH;;AACDb,MAAAA,QAAQ,CAACE,kBAAkB,CAACI,WAAD,CAAnB,CAAR;AACH,KAVL,EAUOU,KAVP,CAUaC,CAAC,IAAI;AACVjB,MAAAA,QAAQ,CAACI,iBAAiB,CAACa,CAAD,CAAlB,CAAR;AACH,KAZL;AAaH,GAhBD;AAiBH,CAlBM","sourcesContent":["import { PURCHASE_BURGER_SUCCESS, PURCHASE_BURGER_FAILED,\n    PURCHASE_BURGER_START, PURCHASE_INIT, FETCH_ORDERS_START,\n    FETCH_ORDERS_SUCCESS, FETCH_ORDERS_FAILED } from '../actions/actionTypes';\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: PURCHASE_BURGER_SUCCESS,\n        id: id,\n        orderData: orderData\n    };\n};\n\nexport const purchaseBurgerFailed = (error) => {\n    return {\n        type: PURCHASE_BURGER_FAILED,\n        error: error\n    };\n};\n\nexport const purchaseBurgerStart = () => {\n    return {\n        type: PURCHASE_BURGER_START\n    };\n};\n\nexport const purchaseBurger = (orderData, token) => {\n    return dispatch => {\n        \n    };\n};\n\nexport const purchaseInit = () => {\n    return {\n        type: PURCHASE_INIT\n    };\n};\n\nexport const fetchOrdersSuccess = (orders) => {\n    return {\n        type: FETCH_ORDERS_SUCCESS,\n        orders: orders\n    };\n};\n\nexport const fetchOrdersFailed = (error) => {\n    return {\n        type: FETCH_ORDERS_FAILED,\n        error: error\n    };\n};\n\nexport const fetchOrdersStart = () => {\n    return {\n        type: FETCH_ORDERS_START\n    };\n};\n\nexport const fetchOrders = (token, userId) => {\n    return dispatch => {\n        dispatch(fetchOrdersStart());\n        const queryParams = `auth=${token}&orderBy=\"userId\"&equalTo=\"${userId}\"`;\n        axios.get(`/orders.json?auth=${token}?${queryParams}`)\n            .then(response => {\n                const fetchOrders = [];\n                for (let key in response.data) {\n                    fetchOrders.push({\n                        ...response.data[key],\n                        id: key\n                    });\n                }\n                dispatch(fetchOrdersSuccess(fetchOrders));\n            }).catch(e => {\n                dispatch(fetchOrdersFailed(e));\n            });\n    };\n};"]},"metadata":{},"sourceType":"module"}