{"ast":null,"code":"import { PURCHASE_BURGER_SUCCESS, PURCHASE_BURGER_FAILED, PURCHASE_BURGER_START, PURCHASE_INIT, FETCH_ORDERS_START, FETCH_ORDERS_SUCCESS, FETCH_ORDERS_FAILED } from '../actions/actionTypes';\nimport axios from '../../axios-orders';\nexport const purchaseBurgerSuccess = (id, orderData) => {\n  return {\n    type: PURCHASE_BURGER_SUCCESS,\n    id: id,\n    orderData: orderData\n  };\n};\nexport const purchaseBurgerFailed = error => {\n  return {\n    type: PURCHASE_BURGER_FAILED,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = orderData => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json', orderData).then(response => {\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(e => {\n      dispatch(purchaseBurgerFailed(e));\n    });\n  };\n};\nexport const purchaseInit = () => {\n  return {\n    type: PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFailed = error => {\n  return {\n    type: FETCH_ORDERS_FAILED,\n    error: error\n  };\n};\nexport const fetchOrdersStart = () => {\n  return {\n    type: FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = () => {\n  return dispatch => {};\n  axios.get('/orders.json').then(response => {\n    const fetchOrders = [];\n\n    for (let key in response.data) {\n      fetchOrders.push({ ...response.data[key],\n        id: key\n      });\n    }\n\n    this.setState({\n      orders: fetchOrders\n    });\n  }).catch(e => {\n    console.log(e);\n  }).finally(() => {\n    this.setState({\n      loading: false\n    });\n  });\n};","map":{"version":3,"sources":["/Users/diogosilva/Desktop/the-burguer-builder/src/store/actions/order.js"],"names":["PURCHASE_BURGER_SUCCESS","PURCHASE_BURGER_FAILED","PURCHASE_BURGER_START","PURCHASE_INIT","FETCH_ORDERS_START","FETCH_ORDERS_SUCCESS","FETCH_ORDERS_FAILED","axios","purchaseBurgerSuccess","id","orderData","type","purchaseBurgerFailed","error","purchaseBurgerStart","purchaseBurger","dispatch","post","then","response","data","name","catch","e","purchaseInit","fetchOrdersSuccess","orders","fetchOrdersFailed","fetchOrdersStart","fetchOrders","get","key","push","setState","console","log","finally","loading"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,sBAAlC,EACIC,qBADJ,EAC2BC,aAD3B,EAC0CC,kBAD1C,EAEIC,oBAFJ,EAE0BC,mBAF1B,QAEqD,wBAFrD;AAGA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,SAAL,KAAmB;AACpD,SAAO;AACHC,IAAAA,IAAI,EAAEX,uBADH;AAEHS,IAAAA,EAAE,EAAEA,EAFD;AAGHC,IAAAA,SAAS,EAAEA;AAHR,GAAP;AAKH,CANM;AAQP,OAAO,MAAME,oBAAoB,GAAIC,KAAD,IAAW;AAC3C,SAAO;AACHF,IAAAA,IAAI,EAAEV,sBADH;AAEHY,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHH,IAAAA,IAAI,EAAET;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMa,cAAc,GAAIL,SAAD,IAAe;AACzC,SAAOM,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACF,mBAAmB,EAApB,CAAR;AACAP,IAAAA,KAAK,CAACU,IAAN,CAAW,cAAX,EAA2BP,SAA3B,EACKQ,IADL,CACUC,QAAQ,IAAI;AACdH,MAAAA,QAAQ,CAACR,qBAAqB,CAACW,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAqBX,SAArB,CAAtB,CAAR;AACH,KAHL,EAGOY,KAHP,CAGaC,CAAC,IAAI;AACVP,MAAAA,QAAQ,CAACJ,oBAAoB,CAACW,CAAD,CAArB,CAAR;AACH,KALL;AAMH,GARD;AASH,CAVM;AAYP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAO;AACHb,IAAAA,IAAI,EAAER;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMsB,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAO;AACHf,IAAAA,IAAI,EAAEN,oBADH;AAEHqB,IAAAA,MAAM,EAAEA;AAFL,GAAP;AAIH,CALM;AAOP,OAAO,MAAMC,iBAAiB,GAAId,KAAD,IAAW;AACxC,SAAO;AACHF,IAAAA,IAAI,EAAEL,mBADH;AAEHO,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMe,gBAAgB,GAAG,MAAM;AAClC,SAAO;AACHjB,IAAAA,IAAI,EAAEP;AADH,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMyB,WAAW,GAAG,MAAM;AAC7B,SAAOb,QAAQ,IAAI,CAElB,CAFD;AAGAT,EAAAA,KAAK,CAACuB,GAAN,CAAU,cAAV,EACKZ,IADL,CACUC,QAAQ,IAAI;AACd,UAAMU,WAAW,GAAG,EAApB;;AACA,SAAK,IAAIE,GAAT,IAAgBZ,QAAQ,CAACC,IAAzB,EAA+B;AAC3BS,MAAAA,WAAW,CAACG,IAAZ,CAAiB,EACb,GAAGb,QAAQ,CAACC,IAAT,CAAcW,GAAd,CADU;AAEbtB,QAAAA,EAAE,EAAEsB;AAFS,OAAjB;AAIH;;AACD,SAAKE,QAAL,CAAc;AAACP,MAAAA,MAAM,EAAEG;AAAT,KAAd;AACH,GAVL,EAUOP,KAVP,CAUaC,CAAC,IAAI;AACVW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,CAAZ;AACH,GAZL,EAYOa,OAZP,CAYe,MAAM;AACb,SAAKH,QAAL,CAAc;AAACI,MAAAA,OAAO,EAAE;AAAV,KAAd;AACH,GAdL;AAeH,CAnBM","sourcesContent":["import { PURCHASE_BURGER_SUCCESS, PURCHASE_BURGER_FAILED,\n    PURCHASE_BURGER_START, PURCHASE_INIT, FETCH_ORDERS_START,\n    FETCH_ORDERS_SUCCESS, FETCH_ORDERS_FAILED } from '../actions/actionTypes';\nimport axios from '../../axios-orders';\n\nexport const purchaseBurgerSuccess = (id, orderData) => {\n    return {\n        type: PURCHASE_BURGER_SUCCESS,\n        id: id,\n        orderData: orderData\n    };\n};\n\nexport const purchaseBurgerFailed = (error) => {\n    return {\n        type: PURCHASE_BURGER_FAILED,\n        error: error\n    };\n};\n\nexport const purchaseBurgerStart = () => {\n    return {\n        type: PURCHASE_BURGER_START\n    };\n};\n\nexport const purchaseBurger = (orderData) => {\n    return dispatch => {\n        dispatch(purchaseBurgerStart());\n        axios.post('/orders.json', orderData)\n            .then(response => {\n                dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n            }).catch(e => {\n                dispatch(purchaseBurgerFailed(e));\n            });\n    };\n};\n\nexport const purchaseInit = () => {\n    return {\n        type: PURCHASE_INIT\n    };\n};\n\nexport const fetchOrdersSuccess = (orders) => {\n    return {\n        type: FETCH_ORDERS_SUCCESS,\n        orders: orders\n    };\n};\n\nexport const fetchOrdersFailed = (error) => {\n    return {\n        type: FETCH_ORDERS_FAILED,\n        error: error\n    };\n};\n\nexport const fetchOrdersStart = () => {\n    return {\n        type: FETCH_ORDERS_START\n    };\n};\n\nexport const fetchOrders = () => {\n    return dispatch => {\n        \n    };\n    axios.get('/orders.json')\n        .then(response => {\n            const fetchOrders = [];\n            for (let key in response.data) {\n                fetchOrders.push({\n                    ...response.data[key],\n                    id: key\n                });\n            }\n            this.setState({orders: fetchOrders});\n        }).catch(e => {\n            console.log(e);\n        }).finally(() => {\n            this.setState({loading: false})\n        });\n};"]},"metadata":{},"sourceType":"module"}