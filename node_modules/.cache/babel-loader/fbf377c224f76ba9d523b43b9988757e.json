{"ast":null,"code":"import axios from '../../axios-orders';\nimport { put } from 'redux-saga/effects';\nimport { purchaseBurgerStart, purchaseBurgerSuccess, purchaseBurgerFailed, fetchOrdersStart, fetchOrdersFailed } from '../actions/index';\nexport function* purchaseBurgerSaga(action) {\n  yield put(purchaseBurgerStart());\n\n  try {\n    const response = axios.post(`/orders.json?auth=${action.token}`, action.orderData);\n    yield put(purchaseBurgerSuccess(response.data.name, action.orderData));\n  } catch (e) {\n    yield put(purchaseBurgerFailed());\n  }\n}\nexport function* fetchOrdersSaga(action) {\n  yield put(fetchOrdersStart());\n  const queryParams = `auth=${action.token}&orderBy=\"userId\"&equalTo=\"${action.userId}\"`;\n\n  try {\n    const response = yield axios.get(`/orders.json?${queryParams}`);\n    const fetchOrders = [];\n\n    for (let key in response.data) {\n      fetchOrders.push({ ...response.data[key],\n        id: key\n      });\n    }\n\n    yield put(fetchOrdersSuccess(fetchOrders));\n  } catch (e) {\n    yield put(fetchOrdersFailed(e));\n  }\n}","map":{"version":3,"sources":["/Users/diogosilva/Desktop/react-complete-guide/the-burguer-builder/src/store/sagas/order.js"],"names":["axios","put","purchaseBurgerStart","purchaseBurgerSuccess","purchaseBurgerFailed","fetchOrdersStart","fetchOrdersFailed","purchaseBurgerSaga","action","response","post","token","orderData","data","name","e","fetchOrdersSaga","queryParams","userId","get","fetchOrders","key","push","id","fetchOrdersSuccess"],"mappings":"AACA,OAAOA,KAAP,MAAkB,oBAAlB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,mBAAT,EAA8BC,qBAA9B,EAAqDC,oBAArD,EAA2EC,gBAA3E,EAA6FC,iBAA7F,QAAsH,kBAAtH;AAEA,OAAO,UAAUC,kBAAV,CAA6BC,MAA7B,EAAqC;AACxC,QAAMP,GAAG,CAACC,mBAAmB,EAApB,CAAT;;AACA,MAAI;AACA,UAAMO,QAAQ,GAAGT,KAAK,CAACU,IAAN,CAAY,qBAAoBF,MAAM,CAACG,KAAM,EAA7C,EAAgDH,MAAM,CAACI,SAAvD,CAAjB;AACA,UAAMX,GAAG,CAACE,qBAAqB,CAACM,QAAQ,CAACI,IAAT,CAAcC,IAAf,EAAqBN,MAAM,CAACI,SAA5B,CAAtB,CAAT;AACH,GAHD,CAGE,OAAMG,CAAN,EAAS;AACP,UAAMd,GAAG,CAACG,oBAAoB,EAArB,CAAT;AACH;AACJ;AAED,OAAO,UAAUY,eAAV,CAA0BR,MAA1B,EAAkC;AACrC,QAAMP,GAAG,CAACI,gBAAgB,EAAjB,CAAT;AACA,QAAMY,WAAW,GAAI,QAAOT,MAAM,CAACG,KAAM,8BAA6BH,MAAM,CAACU,MAAO,GAApF;;AACA,MAAI;AACA,UAAMT,QAAQ,GAAG,MAAMT,KAAK,CAACmB,GAAN,CAAW,gBAAeF,WAAY,EAAtC,CAAvB;AACA,UAAMG,WAAW,GAAG,EAApB;;AACA,SAAK,IAAIC,GAAT,IAAgBZ,QAAQ,CAACI,IAAzB,EAA+B;AAC3BO,MAAAA,WAAW,CAACE,IAAZ,CAAiB,EACb,GAAGb,QAAQ,CAACI,IAAT,CAAcQ,GAAd,CADU;AAEbE,QAAAA,EAAE,EAAEF;AAFS,OAAjB;AAIH;;AACD,UAAMpB,GAAG,CAACuB,kBAAkB,CAACJ,WAAD,CAAnB,CAAT;AACH,GAVD,CAUE,OAAML,CAAN,EAAS;AACP,UAAMd,GAAG,CAACK,iBAAiB,CAACS,CAAD,CAAlB,CAAT;AACH;AACJ","sourcesContent":["\nimport axios from '../../axios-orders';\nimport { put } from 'redux-saga/effects';\nimport { purchaseBurgerStart, purchaseBurgerSuccess, purchaseBurgerFailed, fetchOrdersStart, fetchOrdersFailed } from '../actions/index';\n\nexport function* purchaseBurgerSaga(action) {\n    yield put(purchaseBurgerStart());\n    try {\n        const response = axios.post(`/orders.json?auth=${action.token}`, action.orderData);\n        yield put(purchaseBurgerSuccess(response.data.name, action.orderData));\n    } catch(e) {\n        yield put(purchaseBurgerFailed());\n    }\n}\n\nexport function* fetchOrdersSaga(action) {\n    yield put(fetchOrdersStart());\n    const queryParams = `auth=${action.token}&orderBy=\"userId\"&equalTo=\"${action.userId}\"`;\n    try {\n        const response = yield axios.get(`/orders.json?${queryParams}`);\n        const fetchOrders = [];\n        for (let key in response.data) {\n            fetchOrders.push({\n                ...response.data[key],\n                id: key\n            });\n        }\n        yield put(fetchOrdersSuccess(fetchOrders));\n    } catch(e) {\n        yield put(fetchOrdersFailed(e));\n    }\n}"]},"metadata":{},"sourceType":"module"}